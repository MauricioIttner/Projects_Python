"""
Exercício com Abstração, Herança, Encapsulamento e Polimorfismo
Criar um sistema bancário (extremamente simples) que tem clientes, contas e
um banco. A ideia é que o cliente tenha uma conta (poupança ou corrente) e que
possa sacar/depositar nessa conta. Contas corrente tem um limite extra.
Conta (ABC)
    ContaCorrente
    ContaPoupanca
Pessoa (ABC)
    Cliente
        Clente -> Conta
Banco
    Banco -> Cliente
    Banco -> Conta
Dicas:
Criar classe Cliente que herda da classe Pessoa (Herança)
    Pessoa tem nome e idade (com getters)
    Cliente TEM conta (Agregação da classe ContaCorrente ou ContaPoupanca)
Criar classes ContaPoupanca e ContaCorrente que herdam de Conta
    ContaCorrente deve ter um limite extra
    Contas têm agência, número da conta e saldo
    Contas devem ter método para depósito
    Conta (super classe) deve ter o método sacar abstrato (Abstração e
    polimorfismo - as subclasses que implementam o método sacar)
Criar classe Banco para AGREGAR classes de clientes e de contas (Agregação)
Banco será responsável autenticar o cliente e as contas da seguinte maneira:
    Banco tem contas e clentes (Agregação)
    * Checar se a agência é daquele banco
    * Checar se o cliente é daquele banco
    * Checar se a conta é daquele banco
Só será possível sacar se passar na autenticação do banco (descrita acima)
Banco autentica por um método.
"""
from abc import ABC, abstractmethod


class Pessoa(ABC):
    def __init__(self, nome, idade):
        self._nome = nome
        self._idade = idade

    def get_nome(self):
        return self._nome

    def get_idade(self):
        return self._idade


class Conta(ABC):
    def __init__(self, agencia, conta, saldo=0.0):
        self._agencia = agencia
        self._conta = conta
        self._saldo = saldo

    def get_agencia(self):
        return self._agencia

    def get_conta(self):
        return self._conta

    def get_saldo(self):
        return self._saldo

    @abstractmethod
    def sacar(self, value):
        pass

    def deposito(self, value):
        self._saldo += value


class ContaCorrente(Conta):
    def __init__(self, agencia, conta, saldo=0.0, limite=0.0):
        super().__init__(agencia, conta, saldo)
        self._limite = limite

    def get_limite(self):
        return self._limite

    def sacar(self, value):
        if self._saldo + self._limite >= value:
            self._saldo -= value
            return True
        else:
            return False


class ContaPoupanca(Conta):
    def sacar(self, value):
        if self._saldo >= value:
            self._saldo -= value
            return True
        else:
            return False


class Cliente(Pessoa):
    def __init__(self, nome, idade, conta):
        super().__init__(nome, idade)
        self._conta = conta

    def get_conta(self):
        return self._conta


class Banco:
    def __init__(self):
        self._clientes = []
        self._contas = []

    def adicionar_cliente(self, cliente):
        self._clientes.append(cliente)

    def adicionar_conta(self, conta):
        self._contas.append(conta)

    def autenticar(self, cliente, conta, agencia):
        if cliente in self._clientes and conta in self._contas and conta.get_agencia() == agencia:
            return True
        else:
            return False


banco = Banco()

conta1 = ContaCorrente('001', '12345', 1000.00, 500.00)
conta2 = ContaPoupanca('001', '67890', 2000.00)

cliente1 = Cliente("João Henrique", 30, conta1)
cliente2 = Cliente("Maria Vitória", 25, conta2)

banco.adicionar_conta(conta1)
banco.adicionar_conta(conta2)
banco.adicionar_cliente(cliente1)
banco.adicionar_cliente(cliente2)

cliente = cliente2
conta = cliente.get_conta()
agencia = conta.get_agencia()

if banco.autenticar(cliente, conta, agencia):
    valor_saque = float(input('Digite o valor de saque: '))
    if conta.sacar(valor_saque):
        print(f"Saque de R$ {valor_saque:.2f} realizado com sucesso.")
    else:
        print("Saldo insuficiente para saque.")
else:
    print("Autenticação falhou.")

# cliente = cliente1
# conta = cliente.get_conta()
# agencia = conta.get_agencia()

# if banco.autenticar(cliente, conta, agencia):
#     valor_saque = float(input('Digite o valor de saque: '))
#     if conta.sacar(valor_saque):
#         print(f"Saque de R$ {valor_saque:.2f} realizado com sucesso.")
#     else:
#         print("Saldo insuficiente para saque.")
# else:
#     print("Autenticação falhou.")
